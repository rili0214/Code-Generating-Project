```dafny
predicate ValidInputPair(i: int, j: int) {
  i != 0 || j != 0
}

method ReadInputSequence() returns (l: seq<(int, int)>)
  ensures forall k :: 0 <= k < |l| ==> ValidInputPair(l[k]0, l[k]1)
{
  var l: seq<(int, int)> := [];
  while true
    invariant forall k :: 0 <= k < |l| ==> ValidInputPair(l[k]0, l[k]1)
  {
    var input := ReadInput();
    if input.0 == 0 && input.1 == 0 {
      break;
    } else {
      l := l + [input];
    }
  }
  return l;
}

method ReadInput() returns (i: int, j: int)
{
  var line := Console.ReadLine();
  var parts := line.Split(new char[] { ' ' });
  i := int.Parse(parts[0]);
  j := int.Parse(parts[1]);
}

method PrintSortedPairs(l: seq<(int, int)>) {
  requires forall k :: 0 <= k < |l| ==> ValidInputPair(l[k]0, l[k]1)
  {
    var i: int := 0;
    while i < |l|
      invariant 0 <= i <= |l|
    {
      var (v1, v2) := l[i];
      if v1 < v2 {
        Print(v1, v2);
      } else {
        Print(v2, v1);
      }
      i := i + 1;
    }
  }
}

method Print(i: int, j: int) {
  print i; print " "; print j; print "\n";
}

method Main() {
  var inputSequence := ReadInputSequence();
  PrintSortedPairs(inputSequence);
}
```