[
    {
        "mode": "mode_1",
        "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\ndef main():\n\tnum = int(input())\n\tfor i in range(num):\n\t\ttri = [int(x) for x in input().split(\" \")]\n\t\ttri.sort()\n\t\tif tri[2] ** 2 == tri[0] ** 2 + tri[1] ** 2:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\t\nif __name__ == '__main__':\n  main()",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "import math\nwhile 1:\n    try:\n        a,b = map(int, input().split())\n        print(math.gcd(a,b), int(a*b/math.gcd(a,b)))\n    except:\n        break\n",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "import math\nn = input()\nm = 100\nfor i in xrange(n):\n    m = m * 1.05\n    m = math.ceil(m)\nprint \"%i\"%(m*1000)",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "n = int(input())\npair = [1, 1]\n\nfor i in range(n - 1):\n    pair[i % 2] = sum(pair)\n\nprint(pair[n % 2])\n\n",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "n = int(input())\nl = [[] for i in range(n)]\nretval=[10**10 for i in range(n)]\n\n\n\nfor i in range(n):\n    _input = [int(j) - 1 for j in input().split(\" \")]\n    u = _input[0]\n    k = _input[1] + 1\n    node = sorted(_input[2::])\n    if u in node:\n        node.remove(u)\n    l[u] = node\n\nretval[0]=0\nfor step in range(n+1):\n    for i ,d in enumerate(retval):\n        if d==step:\n            for node in l[i]:\n                retval[node]=min(retval[node],step+1)\n\nfor i,d in enumerate(retval):\n    if d==10**10:\n        print(i+1,-1)\n    else:\n        print(i+1,d)\n\n",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "# coding:utf-8\n\ndef insertionSort(A, N):\n    for i in range(1, N):\n        v = A[i]\n        j = i - 1\n        while j >= 0 and A[j] > v:\n            A[j + 1] = A[j]\n            j -= 1\n        A[j + 1] = v\n        for i in A:\n            print i,\n        else:\n            print\n\nN = input()\nA = map(int, raw_input().split())\nfor i in A:\n    print i,\nelse:\n    print\ninsertionSort(A,N)",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\nx, y = map(int, sys.stdin.readline().split())\nprint(gcd(x, y))\n\n",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "import math\nn = int(raw_input())\ncnt = 0\nfor i in range(n):\n    j = 2\n    num = int(raw_input())\n    while j <= math.sqrt(num):\n        if num % j == 0:\n            break\n        j+=1\n    if j > math.sqrt(num):\n        cnt+=1\nprint cnt\n",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "n = int(input())\nr = []\nfor i in range(n):\n    r.append(int(input()))\n\nmin = r[0]\nmax = -10 ** 12\n\nfor j in r[1:]:\n    if j - min > max:\n        max = j - min\n    if min > j:\n        min = j\n\nprint(max)",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "q = int(input())\n\nsort1 = list(map(int, input().split()))\n\ndef bubblesort(ary):\n    cnt = 0\n    for i in range(q):\n        for j in range(q-1, i, -1):\n            if ary[j] < ary[j-1]:\n                ary[j-1], ary[j] = ary[j], ary[j-1]\n                cnt += 1\n    return (ary, cnt)\n\nary, cnt = bubblesort(sort1)\nprint(\" \".join(map(str, ary)))\nprint(cnt)",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "import math\nresult = []\nwhile True:\n    n = input()\n    if n == 0:\n        break;\n    score = map(float,raw_input().split(\" \"))\n    \n    ave = sum(score)/len(score)\n\n    alpha = math.sqrt(sum([(s-ave)**2 for s in score])/len(score))\n    result.append(alpha)\n\nfor r in result:\n    print r",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "import math\n\nnum = int(input())\n\nx = list(map(float,input().split()))\n\ny = list(map(float,input().split()))\n\ndiff = [0]*num\n\nfor a in range(num):\n    diff[a] = abs(x[a] - y[a])\n    \nprint(sum(diff)) #1\n\npo = [0]*num\n\nfor b in range(num):\n    po[b] = diff[b] * diff[b]\n    \nprint(math.sqrt(sum(po))) #2\n\n\n\nfor c in range(num):\n    po[c] = diff[c] * diff[c] * diff[c]\n    \nprint((sum(po))**(1/3)) #3\n\n_max = 0\n\nfor d in diff:\n    if _max < d:\n        _max = d\n\nprint(_max)#infinity\n",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "class Dice():\n    \n    state = [0 for _ in range(6)]\n\n    def __init__(self, dice_list):\n        self.state[0] = dice_list[0]\n        self.state[1] = dice_list[1]\n        self.state[2] = dice_list[2]\n        self.state[3] = dice_list[3]\n        self.state[4] = dice_list[4]\n        self.state[5] = dice_list[5]\n\n    def north(self):\n        tmp = self.state[0]\n        self.state[0] = self.state[1]\n        self.state[1] = self.state[5]\n        self.state[5] = self.state[4]\n        self.state[4] = tmp\n\n    def west(self):\n        tmp = self.state[0]\n        self.state[0] = self.state[2]\n        self.state[2] = self.state[5]\n        self.state[5] = self.state[3]\n        self.state[3] = tmp\n\n    def south(self):\n        tmp = self.state[0]\n        self.state[0] = self.state[4]\n        self.state[4] = self.state[5]\n        self.state[5] = self.state[1]\n        self.state[1] = tmp\n\n\n    def east(self):\n        tmp = self.state[0]\n        self.state[0] = self.state[3]\n        self.state[3] = self.state[5]\n        self.state[5] = self.state[2]\n        self.state[2] = tmp\n\n    \nif __name__ == '__main__':\n    L = list(map(int, input().split()))\n    actions = list(input())\n\n    dice = Dice(L)\n\n    for action in actions:\n        if action == 'N':\n            dice.north()\n\n        if action == 'W':\n            dice.west()\n\n        if action == 'S':\n            dice.south()\n\n        if action == 'E':\n            dice.east()\n\n    print(dice.state[0])\n",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "#coding: UTF-8\n\ndef X_Cubic(x):\n    return x*x*x\n\nif __name__==\"__main__\":\n    x = input()\n    ans = X_Cubic(int(x))\n    print(ans)",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "a,b = map(int, raw_input().split())\ns = a*b\nl = 2*a + 2*b\nprint s, l",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "def compare(a, b, c):\n    if a < b and b < c:\n        print('Yes')\n    else:\n        print('No')\n\na, b, c = [int(x) for x in input().split()]\ncompare(a, b, c)",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "# encoding:utf-8\ninput = list(map(int, input().split(\" \")))\ninput.sort()\nprint (str(input[0]) + \" \" + str(input[1]) + \" \" + str(input[2]))",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "w,h,x,y,r = map(int, raw_input().split())\nif x >= r and x <= (w-r) and y >= r and y <= (h-r):\n\tprint 'Yes'\nelse:\n\tprint 'No'",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "x = int(input())\ni=1\n\nwhile x!=0:\n    print('Case {0}: {1}'.format(i,x))\n    x = int(input())\n    i+=1\n\n",
        "language": "Python"
    },
    {
        "mode": "mode_1",
        "code": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nl = []\nwhile True:\n    values = map(int, raw_input().split())\n    if values[0] == 0 and values[1] == 0:\n        break\n    else:\n        l.append(values)\n\nfor v in l:\n    if v[0] < v[1]:\n        print('%d %d') % (v[0], v[1])\n    else:\n        print('%d %d') % (v[1], v[0])",
        "language": "Python"
    }
]